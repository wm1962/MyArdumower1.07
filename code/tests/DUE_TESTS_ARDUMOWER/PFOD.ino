
/* ===== pfod Command for JAMES BUTTLER ====
  pfodApp msg {.} --> {,+<bg bk><y>~Hallo ich bin James Buttler Dein persoenlicher Haustechnik-Assistent, waehle den Raum den du steuern m√∂chtest.`0~V3|!T<bg gy><b><+6><bk>~JAMES BUTTLER|A@<bg m><+2><y>~WOHNZIMMER|C<bg gy><+2><y>~ELEKTRONIK-LABOR|B<bg g><+2><y>~ANGELAs ZIMMER|N<bg o><+2><y>~WOHN-KUECHE|O<bg gy><+2><y>~FLUR HAUSEINGANG|P<bg bl><+2><y>~WC / WASCHKUECHE|Q<bg t><+2><y>~BAD - DUSCHE|S<bg y><+2><n>~MEGANs ZIMMER|U<bg p><+2><y>~LEAs WOHNWAGEN|V<bg m><+2><y>~WERKSTATT|R<bg g><+2><y>~TERRASSE/GARTEN}
*/
/* ===== pfod Command for subMenu_A ====
  pfodApp msg {A} --> {,+<bg bk><y>~Ok du willst das Wohnzimmer steuern. Schalte mit den EIN/AUS Tasten die gewuenschten Geraete ein und aus.`0~V3|!E<bg s><b><+6>~JAMES BUTTLER|!H<bg m><+6><y>~Wohnzimmer|I<bg m><+2><y>`0~Das Deckenlicht ist ~   ~aus\an~ |F<bg m><+2><y>`0~Die Beleuchtung am Fenster ist ~~aus\an~ |G<bg m><+2><y>`0~Die Beleuchtung Buecherregal ist ~~aus\an~}
*/
/* ===== pfod Command for subMenu_C ====
  pfodApp msg {C} --> {,+<y>~Ok du willst das Elektroniklabor steuern. Schalte mit den EIN/AUS Tasten die gewuenschten Geraete ein und aus.`0~V3|D<bg gy><+2><y>`0~Das Deckenlicht ist ~~aus\an~ }
*/
/* ===== pfod Command for subMenu_B ====
  pfodApp msg {B} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_N ====
  pfodApp msg {N} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_O ====
  pfodApp msg {O} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_P ====
  pfodApp msg {P} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_Q ====
  pfodApp msg {Q} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_S ====
  pfodApp msg {S} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_U ====
  pfodApp msg {U} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_V ====
  pfodApp msg {V} --> {,~<prompt not set>`0~V1}
*/
/* ===== pfod Command for subMenu_R ====
  pfodApp msg {R} --> {,~<prompt not set>`0~V1}
*/
// Using Serial2 and 19200 baud for send and receive
// Serial2 D0 (RX) and D1 (TX) on Arduino Leonardo, Yun and SparkFun FioV3 boards and D19 (RX) and D18 (TX) on Arduino Due and Mega boards
/* Code generated by pfodDesignerV2 V2.0.2185
   (c)2014-2016 Forward Computing and Control Pty. Ltd.
   NSW Australia, www.forward.com.au
   This generated code may be freely used for both private and commercial use
*/

int swap01(int); // method prototype for slider end swaps

// ======================
// this is the pfodParser.h V2 file with the class renamed pfodParser_codeGenerated and with comments, constants and un-used methods removed
class pfodParser_codeGenerated: public Print {
  public:
    pfodParser_codeGenerated(const char* version); pfodParser_codeGenerated(); void connect(Stream* ioPtr); void closeConnection(); byte parse(); bool isRefresh();
    const char* getVersion(); void setVersion(const char* version); void sendVersion(); byte* getCmd(); byte* getFirstArg();
    byte* getNextArg(byte *start); byte getArgsCount(); byte* parseLong(byte* idxPtr, long *result); byte getParserState();
    void setCmd(byte cmd); void setDebugStream(Print* debugOut); size_t write(uint8_t c); int available(); int read();
    int peek(); void flush(); void setIdleTimeout(unsigned long timeout); Stream* getPfodAppStream(); void init(); byte parse(byte in);
  private:
    Stream* io; byte emptyVersion[1] = {0}; byte argsCount; byte argsIdx; byte parserState; byte args[255 + 1]; byte *versionStart;
    byte *cmdStart; bool refresh; const char *version;
};
//============= end of pfodParser_codeGenerated.h
pfodParser_codeGenerated parser("V4"); // create a parser to handle the pfod messages
int cmd_I_var; // name the variable for 'Das Deckenlicht ist'  0=aus 1=an
int cmd_F_var; // name the variable for 'Die Beleuchtung am Fenster ist'  0=aus 1=an
int cmd_G_var; // name the variable for 'Die Beleuchtung Buecherregal ist'  0=aus 1=an
int cmd_D_var; // name the variable for 'Das Deckenlicht ist'  0=aus 1=an
boolean I_FLAG = false;
boolean F_FLAG = false;
boolean G_FLAG = false;


// the setup routine runs once on reset:
void pfodSetup() {
  Serial2.begin(19200);
  for (int i = 3; i > 0; i--) {
    // wait a few secs to see if we are being programmed
    delay(1000);
  }
  parser.connect(&Serial2); // connect the parser to the i/o stream
  cmd_I_var = 0;
  cmd_F_var = 0;
  cmd_G_var = 0;
  cmd_D_var = 0;

  // <<<<<<<<< Your extra setup code goes here
}

// the loop routine runs over and over again forever:
void pfodLoop() {
  uint8_t cmd = parser.parse(); // parse incoming data from connection
  // parser returns non-zero when a pfod command is fully parsed
  if (cmd != 0) { // have parsed a complete msg { to }
    uint8_t* pfodFirstArg = parser.getFirstArg(); // may point to \0 if no arguments in this msg.
    long pfodLongRtn; // used for parsing long return arguments, if any
    if ('.' == cmd) {
      // pfodApp has connected and sent {.} , it is asking for the main menu
      if (!parser.isRefresh()) {
        sendMainMenu(); // send back the menu designed
      } else {
        sendMainMenuUpdate(); // menu is cached just send update
      }

      // now handle commands returned from button/sliders
      //    } else if('T'==cmd) { // this is a label. pfodApp NEVER sends this cmd -- 'JAMES BUTTLER'
      //      // in the main Menu of JAMES BUTTLER

    } else if ('A' == cmd) { // user pressed -- 'WOHNZIMMER'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_A
      if (!parser.isRefresh()) {
        sendSubMenu_A(); // send back full the menu.
      } else {
        sendSubMenuUpdate_A(); // menu is cached just send update.
      }

    } else if ('C' == cmd) { // user pressed -- 'ELEKTRONIK-LABOR'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_C
      if (!parser.isRefresh()) {
        sendSubMenu_C(); // send back full the menu.
      } else {
        sendSubMenuUpdate_C(); // menu is cached just send update.
      }

    } else if ('B' == cmd) { // user pressed -- 'ANGELAs ZIMMER'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_B
      if (!parser.isRefresh()) {
        sendSubMenu_B(); // send back full the menu.
      } else {
        sendSubMenuUpdate_B(); // menu is cached just send update.
      }

    } else if ('N' == cmd) { // user pressed -- 'WOHN-KUECHE'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_N
      if (!parser.isRefresh()) {
        sendSubMenu_N(); // send back full the menu.
      } else {
        sendSubMenuUpdate_N(); // menu is cached just send update.
      }

    } else if ('O' == cmd) { // user pressed -- 'FLUR HAUSEINGANG'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_O
      if (!parser.isRefresh()) {
        sendSubMenu_O(); // send back full the menu.
      } else {
        sendSubMenuUpdate_O(); // menu is cached just send update.
      }

    } else if ('P' == cmd) { // user pressed -- 'WC / WASCHKUECHE'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_P
      if (!parser.isRefresh()) {
        sendSubMenu_P(); // send back full the menu.
      } else {
        sendSubMenuUpdate_P(); // menu is cached just send update.
      }

    } else if ('Q' == cmd) { // user pressed -- 'BAD - DUSCHE'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_Q
      if (!parser.isRefresh()) {
        sendSubMenu_Q(); // send back full the menu.
      } else {
        sendSubMenuUpdate_Q(); // menu is cached just send update.
      }

    } else if ('S' == cmd) { // user pressed -- 'MEGANs ZIMMER'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_S
      if (!parser.isRefresh()) {
        sendSubMenu_S(); // send back full the menu.
      } else {
        sendSubMenuUpdate_S(); // menu is cached just send update.
      }

    } else if ('U' == cmd) { // user pressed -- 'LEAs WOHNWAGEN'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_U
      if (!parser.isRefresh()) {
        sendSubMenu_U(); // send back full the menu.
      } else {
        sendSubMenuUpdate_U(); // menu is cached just send update.
      }

    } else if ('V' == cmd) { // user pressed -- 'WERKSTATT'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_V
      if (!parser.isRefresh()) {
        sendSubMenu_V(); // send back full the menu.
      } else {
        sendSubMenuUpdate_V(); // menu is cached just send update.
      }

    } else if ('R' == cmd) { // user pressed -- 'TERRASSE/GARTEN'
      // in the main Menu of JAMES BUTTLER
      // this opens subMenu_R
      if (!parser.isRefresh()) {
        sendSubMenu_R(); // send back full the menu.
      } else {
        sendSubMenuUpdate_R(); // menu is cached just send update.
      }

      //    } else if('E'==cmd) { // this is a label. pfodApp NEVER sends this cmd -- 'JAMES BUTTLER'
      //      // in subMenu_A  -- opened by button -- 'WOHNZIMMER'

      //    } else if('H'==cmd) { // this is a label. pfodApp NEVER sends this cmd -- 'Wohnzimmer'
      //      // in subMenu_A  -- opened by button -- 'WOHNZIMMER'

    } else if ('I' == cmd) { // user moved slider -- 'Das Deckenlicht ist'
      // in subMenu_A  -- opened by button -- 'WOHNZIMMER'
      // set output based on slider 0=aus 1=an
      parser.parseLong(pfodFirstArg, &pfodLongRtn); // parse first arg as a long
      cmd_I_var = (int)pfodLongRtn; // set variable
      sendSubMenuUpdate_A(); // always send back a pfod msg otherwise pfodApp will disconnect.

    } else if ('F' == cmd) { // user moved slider -- 'Die Beleuchtung am Fenster ist'
      // in subMenu_A  -- opened by button -- 'WOHNZIMMER'
      // set output based on slider 0=aus 1=an
      parser.parseLong(pfodFirstArg, &pfodLongRtn); // parse first arg as a long
      cmd_F_var = (int)pfodLongRtn; // set variable
      sendSubMenuUpdate_A(); // always send back a pfod msg otherwise pfodApp will disconnect.

    } else if ('G' == cmd) { // user moved slider -- 'Die Beleuchtung Buecherregal ist'
      // in subMenu_A  -- opened by button -- 'WOHNZIMMER'
      // set output based on slider 0=aus 1=an
      parser.parseLong(pfodFirstArg, &pfodLongRtn); // parse first arg as a long
      cmd_G_var = (int)pfodLongRtn; // set variable
      sendSubMenuUpdate_A(); // always send back a pfod msg otherwise pfodApp will disconnect.

    } else if ('D' == cmd) { // user moved slider -- 'Das Deckenlicht ist'
      // in subMenu_C  -- opened by button -- 'ELEKTRONIK-LABOR'
      // set output based on slider 0=aus 1=an
      parser.parseLong(pfodFirstArg, &pfodLongRtn); // parse first arg as a long
      cmd_D_var = (int)pfodLongRtn; // set variable
      sendSubMenuUpdate_C(); // always send back a pfod msg otherwise pfodApp will disconnect.

    } else if ('!' == cmd) {
      // CloseConnection command
      closeConnection(parser.getPfodAppStream());
    } else {
      // unknown command
      parser.print(F("{}")); // always send back a pfod msg otherwise pfodApp will disconnect.
    }
  }
  //  <<<<<<<<<<<  Your other loop() code goes here
  /*
    int cmd_I_var; // name the variable for 'Das Deckenlicht ist'  0=aus 1=an
    int cmd_F_var; // name the variable for 'Die Beleuchtung am Fenster ist'  0=aus 1=an
    int cmd_G_var; // name the variable for 'Die Beleuchtung Buecherregal ist'  0=aus 1=an
    int cmd_D_var; // name the variable for 'Das Deckenlicht ist'  0=aus 1=an
  */
  if (cmd_I_var == 1 && I_FLAG == false) {
    I_FLAG = true;
    wtv020sd16p.stopVoice();
    wtv020sd16p.asyncPlayVoice(2);
  } else if (cmd_I_var == 0) I_FLAG = false;
  if (cmd_F_var == 1 && F_FLAG == false) {
    F_FLAG = true;
    wtv020sd16p.stopVoice();
    wtv020sd16p.asyncPlayVoice(3);
  } else if (cmd_F_var == 0) F_FLAG = false;
  if (cmd_G_var == 1 && G_FLAG == false) {
    G_FLAG = true;
    wtv020sd16p.stopVoice();
    wtv020sd16p.asyncPlayVoice(4);
  } else if (cmd_G_var == 0) G_FLAG = false;
}

void closeConnection(Stream *io) {
  // add any special code here to force connection to be dropped
}

void sendMainMenu() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("+<bg bk><y>~Hallo ich bin James Buttler Dein persoenlicher Haus"));
  parser.print(F("technik-Assistent, waehle den Raum den du steuern m\303\266chtest.`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("|!T<bg gy><b><+6><bk>"));
  parser.print(F("~JAMES BUTTLER"));
  parser.print(F("|A@<bg m><+2><y>"));
  parser.print(F("~WOHNZIMMER"));
  parser.print(F("|C<bg gy><+2><y>"));
  parser.print(F("~ELEKTRONIK-LABOR"));
  parser.print(F("|B<bg g><+2><y>"));
  parser.print(F("~ANGELAs ZIMMER"));
  parser.print(F("|N<bg o><+2><y>"));
  parser.print(F("~WOHN-KUECHE"));
  parser.print(F("|O<bg gy><+2><y>"));
  parser.print(F("~FLUR HAUSEINGANG"));
  parser.print(F("|P<bg bl><+2><y>"));
  parser.print(F("~WC / WASCHKUECHE"));
  parser.print(F("|Q<bg t><+2><y>"));
  parser.print(F("~BAD - DUSCHE"));
  parser.print(F("|S<bg y><+2><n>"));
  parser.print(F("~MEGANs ZIMMER"));
  parser.print(F("|U<bg p><+2><y>"));
  parser.print(F("~LEAs WOHNWAGEN"));
  parser.print(F("|V<bg m><+2><y>"));
  parser.print(F("~WERKSTATT"));
  parser.print(F("|R<bg g><+2><y>"));
  parser.print(F("~TERRASSE/GARTEN"));
  parser.print(F("}"));  // close pfod message
}

void sendMainMenuUpdate() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_A() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("+<bg bk><y>~Ok du willst das Wohnzimmer steuern. Schalte mit de"));
  parser.print(F("n EIN/AUS Tasten die gewuenschten Geraete ein und aus.`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("|!E<bg s><b><+6>"));
  parser.print(F("~JAMES BUTTLER"));
  parser.print(F("|!H<bg m><+6><y>"));
  parser.print(F("~Wohnzimmer"));
  parser.print(F("|I<bg m><+2><y>"));
  parser.print('`');
  parser.print(cmd_I_var); // output the current value
  parser.print(F("~Das Deckenlicht ist ~   ~aus\\an~ "));
  // Note the \\ inside the "'s to send \ ...
  parser.print(F("|F<bg m><+2><y>"));
  parser.print('`');
  parser.print(cmd_F_var); // output the current value
  parser.print(F("~Die Beleuchtung am Fenster ist ~~aus\\an~ "));
  // Note the \\ inside the "'s to send \ ...
  parser.print(F("|G<bg m><+2><y>"));
  parser.print('`');
  parser.print(cmd_G_var); // output the current value
  parser.print(F("~Die Beleuchtung Buecherregal ist ~~aus\\an~"));
  // Note the \\ inside the "'s to send \ ...
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_A() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("|I"));
  parser.print('`');
  parser.print(cmd_I_var); // output the current value
  parser.print(F("|F"));
  parser.print('`');
  parser.print(cmd_F_var); // output the current value
  parser.print(F("|G"));
  parser.print('`');
  parser.print(cmd_G_var); // output the current value
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_C() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("+<y>~Ok du willst das Elektroniklabor steuern. Schalte mit den "));
  parser.print(F("EIN/AUS Tasten die gewuenschten Geraete ein und aus.`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("|D<bg gy><+2><y>"));
  parser.print('`');
  parser.print(cmd_D_var); // output the current value
  parser.print(F("~Das Deckenlicht ist ~~aus\\an~ "));
  // Note the \\ inside the "'s to send \ ...
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_C() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("|D"));
  parser.print('`');
  parser.print(cmd_D_var); // output the current value
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_B() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_B() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_N() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_N() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_O() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_O() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_P() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_P() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_Q() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_Q() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_S() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_S() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_U() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_U() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_V() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_V() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}

void sendSubMenu_R() {
  // !! Remember to change the parser version string
  //    every time you edit this method
  parser.print(F("{,"));  // start a Menu screen pfod message
  // send menu background, format, prompt, refresh and version
  parser.print(F("~<prompt not set>`0"));
  parser.sendVersion(); // send the menu version
  // send menu items
  parser.print(F("}"));  // close pfod message
}

void sendSubMenuUpdate_R() {
  parser.print(F("{;"));  // start an Update Menu pfod message
  // send menu items
  parser.print(F("}"));  // close pfod message
  // ============ end of menu ===========
}
/* You can remove from here on if you have the pfodParser V2 library installed from
    http://www.forward.com.au/pfod/pfodParserLibraries/index.html
    and add
  #include <pfodEEPROM.h
  #include <pfodParser.h>
    at the top of this file
    and replace the line
  pfodParser_codeGenerated parser("V1"); // create a parser to handle the pfod messages
    with
  pfodParser parser("V1");
*/
// this is the pfodParser.cpp V2 file with the class renamed pfodParser_codeGenerated and with comments, constants and un-used methods removed
pfodParser_codeGenerated::pfodParser_codeGenerated() {
  pfodParser_codeGenerated("");
}
pfodParser_codeGenerated::pfodParser_codeGenerated(const char *_version) {
  setVersion(_version);
  io = NULL;
  init();
}
void pfodParser_codeGenerated::init() {
  argsCount = 0; argsIdx = 0; args[0] = 0; args[1] = 0; cmdStart = args; versionStart = emptyVersion; parserState = ((byte)0xff); refresh = false;
}
void pfodParser_codeGenerated::connect(Stream* ioPtr) {
  init();
  io = ioPtr;
}
void pfodParser_codeGenerated::closeConnection() {
  init();
}
Stream* pfodParser_codeGenerated::getPfodAppStream() {
  return io;
}
size_t pfodParser_codeGenerated::write(uint8_t c) {
  if (!io) {
    return 1;
  }
  return io->write(c);
}
int pfodParser_codeGenerated::available() {
  return 0;
}
int pfodParser_codeGenerated::read() {
  return 0;
}
int pfodParser_codeGenerated::peek() {
  return 0;
}
void pfodParser_codeGenerated::flush() {
  if (!io) {
    return;
  }
  // nothing here for now
}
void pfodParser_codeGenerated::setIdleTimeout(unsigned long timeout) { }
void pfodParser_codeGenerated::setCmd(byte cmd) {
  init();
  args[0] = cmd;
  args[1] = 0;
  cmdStart = args;
  versionStart = emptyVersion;
}
byte* pfodParser_codeGenerated::getCmd() {
  return cmdStart;
}
bool pfodParser_codeGenerated::isRefresh() {
  return refresh;
}
const char* pfodParser_codeGenerated::getVersion() {
  return version;
}
void pfodParser_codeGenerated::setVersion(const char* _version) {
  version = _version;
}
void pfodParser_codeGenerated::sendVersion() {
  print('~');
  print(getVersion());
}
byte* pfodParser_codeGenerated::getFirstArg() {
  byte* idxPtr = cmdStart;
  while (*idxPtr != 0) {
    ++idxPtr;
  }
  if (argsCount > 0) {
    ++idxPtr;
  }
  return idxPtr;
}
byte* pfodParser_codeGenerated::getNextArg(byte *start) {
  byte* idxPtr = start;
  while ( *idxPtr != 0) {
    ++idxPtr;
  }
  if (idxPtr != start) {
    ++idxPtr;
  }
  return idxPtr;
}
byte pfodParser_codeGenerated::getArgsCount() {
  return argsCount;
}
byte pfodParser_codeGenerated::getParserState() {
  if ((parserState == ((byte)0xff)) || (parserState == ((byte)'{')) || (parserState == 0) || (parserState == ((byte)'}')) ) {
    return parserState;
  }
  return 0;
}
byte pfodParser_codeGenerated::parse() {
  byte rtn = 0;
  if (!io) {
    return rtn;
  }
  while (io->available()) {
    int in = io->read(); rtn = parse((byte)in);
    if (rtn != 0) {
      if (rtn == '!') {
        closeConnection();
      }
      return rtn;
    }
  }
  return rtn;
}
byte pfodParser_codeGenerated::parse(byte in) {
  if (in == 0xff) {
    // note 0xFF is not a valid utf-8 char
    // but is returned by underlying stream if start or end of connection
    // NOTE: Stream.read() is wrapped in while(Serial.available()) so should not get this
    // unless explicitlly added to stream buffer
    init(); // clean out last partial msg if any
    return 0;
  }
  if ((parserState == ((byte)0xff)) || (parserState == ((byte)'}'))) {
    parserState = ((byte)0xff);
    if (in == ((byte)'{')) {
      init();
      parserState = ((byte)'{');
    }
    return 0;
  }
  if ((argsIdx >= (255 - 2)) && (in != ((byte)'}'))) {
    init();
    return 0;
  }
  if (parserState == ((byte)'{')) {
    parserState = 0;
    if (in == ((byte)':')) {
      refresh = true; return 0;
    }
  }
  if ((in == ((byte)':')) && (versionStart != args)) {
    args[argsIdx++] = 0;
    versionStart = args; cmdStart = args + argsIdx; refresh = (strcmp((const char*)versionStart, version) == 0);
    return 0;
  }
  if ((in == ((byte)'}')) || (in == ((byte)'|')) || (in == ((byte)'~')) || (in == ((byte)'`'))) {
    args[argsIdx++] = 0;
    if (parserState == ((byte)0xfe)) {
      argsCount++;
    }
    if (in == ((byte)'}')) {
      parserState = ((byte)'}'); args[argsIdx++] = 0; return cmdStart[0];
    } else {
      parserState = ((byte)0xfe);
    }
    return 0;
  }
  args[argsIdx++] = in; return 0;
}
byte* pfodParser_codeGenerated::parseLong(byte* idxPtr, long *result) {
  long rtn = 0; boolean neg = false;
  while ( *idxPtr != 0) {
    if (*idxPtr == ((byte)'-')) {
      neg = true;
    } else {
      rtn = (rtn << 3) + (rtn << 1); rtn = rtn +  (*idxPtr - '0');
    }
    ++idxPtr;
  }
  if (neg) {
    rtn = -rtn;
  }
  *result = rtn;
  return ++idxPtr;
}
void pfodParser_codeGenerated::setDebugStream(Print* debugOut) { }


int swap01(int in) {
  return (in == 0) ? 1 : 0;
}
// ============= end generated code =========


